# Work on the player class give them the ability to have a hand and to deal the 
# cards into that hand 

from random import shuffle

class Card:
    def __init__(self, rank, suit): 
        self.rank = rank
        self.suit = suit
        
    
    def __str__(self):
        return str(self.rank) + " of " + self.suit
    
    def value (self):
        if type(self.rank) == int:
            return self.rank
        if self.rank == "A":  
            return 11  
        else: return 10

class Deck:
    deck = []
    def __init__(self):
    
        suits = "Hearts", "Diamonds", "Clubs", "Spades"
        ranks = 2,3,4,5,6,7,8,9,10,"J","Q","K","A"
        for suit in suits:
            for rank in ranks:
                card= Card(rank,suit)
                self.deck.append(card)
    # need to be able to deal cards
    def deal_card(self):
        dealt_card = self.deck.pop()
        return dealt_card # return gives back the value to whomever called it.  

    # needs to be able to shuffle
    def shuffle(self):
        shuffle(self.deck)
    # display the deck
    def display(self):
        for card in self.deck:
            print(card)

class Player:
    def __init__(self, name, isdealer):
        self.name = name
        self.hand = []
        self.isdealer = isdealer
    
    def add_card_to_hand(self, dealt_card):
        self.hand.append(dealt_card)
    
    def display_hand(self ):
        for card in self.hand:
            print(card)
        print(self.score())

    def score(self):
        score = sum(card.value() for card in self.hand) # which cards? the cards in the hand
        if (score > 21):
            for card in self.hand:
                if card.rank == "A":
                    score -= 10 
        # what do we want to evaluate, we want to evaluate the players score. 
        # what should we evlauate that? we want to evaluate each card.             
        # what do we want to have happen when we evaluate the cards? we want the card rank to check and see if there is an ace. 
        # if there is an ace, what do we want to do to the score? We want to subtract the 10 to make the ace value one. 
        return score
# readme the cards generated by the add_card_to_hand method were card objects that the __str__ method used. this allowed a non machine like response and gave us what we wanted. 
    

#scratchpad thinking area
# self.hand is an empty list. I want to get cards from the deck and put them in that list! SO I need to target
# the deck somehow. 
# maybe with pop?
# I would use append to add the result to my hand. 


    
# Work on the player class give them the ability to have a hand and to deal the 
# cards into that hand 

def main(): # main can be called blackjack or gameplay
    
    # Welcome the player and explain the rules
    print("""Welcome to Blackjack! Here are the Rules
      Try to get as close to 21 without going over.
      Kings, Queens, and Jacks are worth 10 points.
      Aces are worth 1 or 11 points.
      Cards 2 through 10 are worth their face value.
      (H)it to take another card.
      (S)tand to stop taking cards.
      The dealer stops hitting at 17""")

    # Run a game of blackjack
    # create a deck of cards outside of the main. 
    deck = Deck()
    deck.shuffle()
    # deck.display()

    # Get the deal card method to deal two cards by running it twice and place the cards in the players hand.
    # readme addition observe that the deck is created on line 70. So we use the created deck 
    # readme You must store your called class in a variable. 
    # readme we create a player by calling the player class and instantiating an object which is saved in a variable. 
    # We update the add_card_to_hand method by having it accept a dealt_card parameter. 
    # Than on the next line of code we have the player hand be appended by the dealt_card parameter when it is called. 
    player = Player("player", False)
    player.add_card_to_hand(deck.deal_card()) # readme to get the python object player to accept the card, you need to specifiy the object name and than the method that was called. 
    player.add_card_to_hand(deck.deal_card()) # readme This code did not start out this way. we refactored it. which is a term I need to understand. 
    print("The players hand is:")
    player.display_hand()
    
    dealer = Player("dealer", True)
    dealer.add_card_to_hand(deck.deal_card()) # readme to get the python object player to accept the card, you need to specifiy the object name and than the method that was called. 
    dealer.add_card_to_hand(deck.deal_card())
    print("The dealers hand is: ")
    dealer.display_hand()
    print("Okay player, do you want to hit or stand?")

    while True:
        print("Please choose H for hit or S for stay.")
        player_choice = input()
        if (player_choice == "H"):
            player.add_card_to_hand(deck.deal_card())
            player.display_hand()
            if (player.score() > 21):
                # print("Player Busts! You lose this round!")
                break
            if dealer.score() <= 15:
                dealer.add_card_to_hand(deck.deal_card())
                print("The Dealers hand is:")
                dealer.display_hand()
                if  dealer.score() > 21:
                    # print("The Dealer Busts!")
                    break

        elif (player_choice == "S"):
            break

    while player.score() > dealer.score():
        dealer.add_card_to_hand(deck.deal_card())
        dealer.display_hand()
        print("dealer card draw")

    if (player.score() > 21):
        print("Player Busts! You lose!")
        
    elif(dealer.score() > 21):
        print("Dealer Busts! Player wins!")
    
    elif(player.score() == dealer.score()):
        print("Its a tie! Bets returned")
    
    elif(player.score() > dealer.score()):
        print("Player is closer to 21! Player wins!")
    else: 
        print("Dealer is closer to 21! Dealer wins!")

if __name__ == '__main__':
    main()